{"version":3,"sources":["context/dialogs-context.tsx","api/authentication.ts","context/authentication-context.tsx","api/types.ts","context/theme-context.tsx","foundation/ContextProviders.tsx","api/storage.ts","components/common/Page.tsx","components/common/forms/TextButton.tsx","components/common/forms/TextInput.tsx","components/pages/register-album/sub-components/FetchAlbum.tsx","components/pages/register-album/RegisterAlbumPage.tsx","components/icons/material-icons.tsx","components/pages/register-album/sub-components/SelectRelease.tsx","components/pages/register-album/sub-components/SelectArtist.tsx","components/pages/register-album/sub-components/SelectReleaseArtists.tsx","components/pages/register-album/sub-components/SelectTrack.tsx","components/pages/register-album/sub-components/TrackInput.tsx","components/pages/register-album/sub-components/TrackInputs.tsx","foundation/Router.tsx","components/common/text/Heading.tsx","components/pages/ErrorPage.tsx","components/layout/LeftSidebar.tsx","components/common/forms/IconButton.tsx","context/menu-context.tsx","components/common/menus/Menu.tsx","components/common/menus/MenuItem.tsx","components/layout/settings/AuthenticationMenuItem.tsx","components/layout/settings/ThemeMenuItem.tsx","components/layout/SettingsMenu.tsx","components/functional/settings/SettingsButton.tsx","components/layout/NavigationBar.tsx","components/functional/authentication/LoginDialog.tsx","foundation/DialogsWrapper.tsx","foundation/BaseAppComponents.tsx","foundation/ThemeWrapper.tsx","foundation/App.tsx","index.tsx"],"names":["DialogType","routePrefix","getIsLoggedIn","a","axios","get","response","data","isLoggedIn","login","params","post","success","logout","AuthenticationContext","createContext","undefined","AuthenticationProvider","children","useState","setIsLoggedIn","useEffect","fetchIsLoggedIn","attemptLogin","username","password","result","attemptLogout","Provider","value","useAuthentication","context","useContext","Error","ReleaseType","DialogContext","DialogProvider","currentDialog","setCurrentDialog","showDialog","dialogType","console","warn","hideDialog","useDialog","ThemeContext","ThemeProvider","useDarkMode","setUseDarkMode","theme","useMemo","createMuiTheme","palette","type","primary","teal","secondary","pink","props","MuiInput","inputProps","spellCheck","toggleDarkMode","useTheme","ContextProviders","getAlbumParams","spotifyAlbumId","createArtist","spotifyArtistId","name","createRelease","createManyTracks","tracks","PageWrapper","styled","div","PageContainer","Container","component","maxWidth","CssBaseline","TextButton","Button","onClick","disabled","variant","color","label","TextInput","icon","action","setValue","isExternal","id","input","TextField","onChange","e","target","InputProps","endAdornment","InputAdornment","position","IconButton","startAdornment","renderAdornment","Tooltip","title","GetAlbumTracksContainer","FetchAlbum","setAlbumParams","albumId","setAlbumId","isFetched","setIsFetched","fetchAlbumParams","urlStripped","replace","suffixIndex","indexOf","strippedAlbumId","substring","albumParams","RegisterAlbumState","CreateIcon","size","fontSize","StripIcon","MenuToggleIcon","LightModeIcon","DarkModeIcon","SettingsIcon","LoginIcon","LogoutIcon","AlbumIcon","SelectRelease","releaseParams","artistIds","setReleaseDocument","spotifyRelease","newReleaseName","setNewReleaseName","newRelease","setNewRelease","sendCreateRelease","isRegistered","releaseType","Album","existingRelease","_id","length","SelectArtist","artistParams","addArtist","newArtist","setNewArtist","sendCreateArtist","spotifyArtist","existingArtist","RegisterArtistsContainer","SelectArtists","artistsParams","map","artist","SelectTrack","trackParams","setTrackName","existingTrack","val","spotifyTrack","spotifyTrackId","TrackInputContainer","TrackNameContainer","TrackInput","artists","TrackInputs","tracksParams","release","setTracks","commonTerm","setCommonTerm","spotifyIds","produce","draft","track","trackName","find","createTracks","reduce","currentTrack","push","currentArtist","releaseId","some","RouterPath","RegisterAlbumPage","InputSpotifyId","registerAlbumState","setRegisterAlbumState","initialAlbumParams","setInitialAlbumParams","albumArtistIds","setAlbumArtistIds","releaseDocument","CreateTracks","registeredAlbumArtistIds","albumArtists","CreateRelease","CreateAlbumArtists","addAlbumArtist","artistId","newAlbumArtistIds","addRelease","updatedAlbumParams","Heading","className","text","isSecondary","Typography","ErrorContainer","ErrorPage","LeftSidebar","isOpen","toggleSidebar","Drawer","anchor","open","onClose","role","List","ListItem","button","Link","to","ListItemIcon","ListItemText","forwardRef","ref","MenuContext","Menu","toggleMenu","anchorEl","MenuItem","useMenu","AuthenticationMenuItem","_props","Login","ThemeMenuItem","SettingsMenu","toggleSettingsMenu","SettingsButtonContainer","SettingsButton","isSettingsMenuOpen","setIsSettingsMenuOpen","useRef","current","NavigationBarContainer","MenuIconButton","StyledDivider","Divider","StyledHeading","NavigationBar","isSidebarOpen","setIsSidebarOpen","pathname","useLocation","pathDisplay","location","matchingPath","Object","values","path","endsWith","pathDisplayValues","getLocationDisplayValue","AppBar","Toolbar","orientation","LoginDialog","setUsername","setPassword","executeLogin","Dialog","DialogTitle","DialogContent","autoFocus","placeholder","DialogActions","dialogComponentMap","Map","DialogsWrapper","dialogComponent","BaseAppComponents","Router","basename","process","RegisterAlbum","render","page","ThemeWrapper","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.837f4a55.chunk.js","sourcesContent":["import { createContext, FunctionComponent, useContext, useState } from \"react\";\r\n\r\nexport enum DialogType {\r\n  Login,\r\n}\r\n\r\ntype DialogContextProps = {\r\n  currentDialog: DialogType | undefined;\r\n  showDialog: (dialogType: DialogType) => void;\r\n  hideDialog: () => void;\r\n};\r\n\r\nexport const DialogContext =\r\n  createContext<DialogContextProps | undefined>(undefined);\r\n\r\nexport const DialogProvider: FunctionComponent = ({ children }) => {\r\n  const [currentDialog, setCurrentDialog] = useState<DialogType>();\r\n\r\n  const showDialog = (dialogType: DialogType) => {\r\n    if (currentDialog) {\r\n      console.warn(\r\n        \"Attempted to show a dialog without closing the existing dialog\"\r\n      );\r\n      return;\r\n    }\r\n    setCurrentDialog(dialogType);\r\n  };\r\n\r\n  const hideDialog = () => {\r\n    if (currentDialog === undefined) {\r\n      console.warn(\"Attempted to hide a dialog without any existing dialogs\");\r\n      return;\r\n    }\r\n    setCurrentDialog(undefined);\r\n  };\r\n\r\n  return (\r\n    <DialogContext.Provider value={{ currentDialog, showDialog, hideDialog }}>\r\n      {children}\r\n    </DialogContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useDialog = () => {\r\n  const context = useContext(DialogContext);\r\n  if (!context) {\r\n    throw new Error(\"Unable to access useDialogs without provider wrapper\");\r\n  }\r\n  return context;\r\n};\r\n","import axios, { AxiosResponse } from \"axios\";\r\n\r\nconst routePrefix = \"https://music-library-server.herokuapp.com/authentication\";\r\ntype ApiResponse = {\r\n  success: boolean;\r\n  error?: any;\r\n};\r\n\r\nexport const getIsLoggedIn = async (): Promise<boolean> => {\r\n  const response: AxiosResponse<{ isLoggedIn: boolean }> = await axios.get(\r\n    routePrefix + \"/isLoggedIn\"\r\n  );\r\n  return response.data.isLoggedIn;\r\n};\r\n\r\nexport const login = async (params: {\r\n  username: string;\r\n  password: string;\r\n}): Promise<boolean> => {\r\n  const response: AxiosResponse<ApiResponse> = await axios.post(\r\n    routePrefix + \"/login\",\r\n    params\r\n  );\r\n  return response.data.success;\r\n};\r\n\r\nexport const logout = async (): Promise<boolean> => {\r\n  const response: AxiosResponse<ApiResponse> = await axios.post(\r\n    routePrefix + \"/logout\"\r\n  );\r\n  return response.data.success;\r\n};\r\n","import {\r\n  createContext,\r\n  FunctionComponent,\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nimport { getIsLoggedIn, login, logout } from \"../api/authentication\";\r\n\r\ntype AuthenticationContextProps = {\r\n  isLoggedIn: boolean;\r\n  attemptLogin: (username: string, password: string) => Promise<boolean>;\r\n  attemptLogout: () => Promise<void>;\r\n};\r\nexport const AuthenticationContext =\r\n  createContext<AuthenticationContextProps | undefined>(undefined);\r\n\r\nexport const AuthenticationProvider: FunctionComponent = ({ children }) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function fetchIsLoggedIn() {\r\n      setIsLoggedIn(await getIsLoggedIn());\r\n    }\r\n    fetchIsLoggedIn();\r\n  }, []);\r\n\r\n  const attemptLogin = async (username: string, password: string) => {\r\n    const result = await login({ username, password });\r\n    setIsLoggedIn(result);\r\n    return result;\r\n  };\r\n\r\n  const attemptLogout = async () => {\r\n    const success = await logout();\r\n    if (success) {\r\n      setIsLoggedIn(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthenticationContext.Provider\r\n      value={{ isLoggedIn, attemptLogin, attemptLogout }}\r\n    >\r\n      {children}\r\n    </AuthenticationContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuthentication = () => {\r\n  const context = useContext(AuthenticationContext);\r\n  if (!context) {\r\n    throw new Error(\r\n      \"Unable to access useAuthentication without provider wrapper\"\r\n    );\r\n  }\r\n  return context;\r\n};\r\n","export type Artist = {\r\n  _id: string;\r\n  name: string;\r\n  spotifyIds: string[];\r\n  releases: string[];\r\n};\r\n\r\nexport enum ReleaseType {\r\n  Album = 'Album',\r\n  Single = 'Single',\r\n  EP = 'EP',\r\n  Soundtrack = 'Soundtrack',\r\n  Compilation = 'Compilation',\r\n  Mixtape = 'Mixtape'\r\n}\r\n\r\nexport type Release = {\r\n  _id: string;\r\n  name: string;\r\n  spotifyIds: string[];\r\n  releaseType: ReleaseType;\r\n  artists: string[] | Artist[];\r\n  tracks: string[] | Track[];\r\n  rating?: number;\r\n  releaseDate?: number;\r\n};\r\n\r\nexport type Track = {\r\n  _id: string;\r\n  name: string;\r\n  spotifyIds: string[];\r\n  artists: string[] | Artist[];\r\n  primaryRelease: string | Release;\r\n  secondaryReleases: string[] | Release[];\r\n  plays: number[];\r\n  rating?: number;\r\n};\r\n","import { createMuiTheme, Theme } from \"@material-ui/core\";\r\nimport { teal, pink } from \"@material-ui/core/colors\";\r\nimport {\r\n  createContext,\r\n  FunctionComponent,\r\n  useContext,\r\n  useMemo,\r\n  useState,\r\n} from \"react\";\r\n\r\ntype ThemeContextProps = {\r\n  useDarkMode: boolean;\r\n  toggleDarkMode: () => void;\r\n  theme: Theme;\r\n};\r\nexport const ThemeContext =\r\n  createContext<ThemeContextProps | undefined>(undefined);\r\n\r\nexport const ThemeProvider: FunctionComponent = ({ children }) => {\r\n  const [useDarkMode, setUseDarkMode] = useState(true);\r\n\r\n  const theme = useMemo(\r\n    () =>\r\n      createMuiTheme({\r\n        palette: {\r\n          type: useDarkMode ? \"dark\" : \"light\",\r\n          primary: teal,\r\n          secondary: pink,\r\n        },\r\n        props: {\r\n          MuiInput: { inputProps: { spellCheck: \"false\" } },\r\n        },\r\n      }),\r\n    [useDarkMode]\r\n  );\r\n\r\n  const toggleDarkMode = () => setUseDarkMode(!useDarkMode);\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ useDarkMode, toggleDarkMode, theme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (!context) {\r\n    throw new Error(\"Attempted to access useTheme without provider wrapper\");\r\n  }\r\n  return context;\r\n};\r\n","import { FunctionComponent } from \"react\";\r\nimport { AuthenticationProvider } from \"../context/authentication-context\";\r\nimport { DialogProvider } from \"../context/dialogs-context\";\r\nimport { ThemeProvider } from \"../context/theme-context\";\r\n\r\nexport const ContextProviders: FunctionComponent = ({ children }) => {\r\n  return (\r\n    <ThemeProvider>\r\n      <AuthenticationProvider>\r\n        <DialogProvider>{children}</DialogProvider>\r\n      </AuthenticationProvider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n","import axios, { AxiosResponse } from \"axios\";\r\nimport { Artist, Release, ReleaseType, Track } from \"./types\";\r\n\r\nconst routePrefix = \"https://music-library-server.herokuapp.com/storage\";\r\n\r\ntype ExistingArtist = { _id: string; name: string };\r\ntype SuggestedArtist = { spotifyArtistId: string; name: string };\r\nexport type ArtistParamsResult =\r\n  | {\r\n      isRegistered: true;\r\n      existingArtist: ExistingArtist;\r\n      spotifyArtist?: never;\r\n    }\r\n  | {\r\n      isRegistered: false;\r\n      existingArtist?: never;\r\n      spotifyArtist: SuggestedArtist;\r\n    };\r\n\r\ntype SuggestedRelease = {\r\n  spotifyAlbumId: string;\r\n  name: string;\r\n  releaseType: \"album\" | \"single\" | \"compilation\";\r\n  albumArtists: ArtistParamsResult[];\r\n};\r\nexport type ReleaseParamsResult =\r\n  | { isRegistered: true; existingRelease: Release; spotifyRelease?: never }\r\n  | {\r\n      isRegistered: false;\r\n      existingRelease?: never;\r\n      spotifyRelease: SuggestedRelease;\r\n    };\r\n\r\ntype SuggestedTrack = {\r\n  spotifyTrackId: string;\r\n  name: string;\r\n  artists: ArtistParamsResult[];\r\n};\r\nexport type TrackParamsResult =\r\n  | { isRegistered: true; existingTrack: Track; spotifyTrack?: never }\r\n  | {\r\n      isRegistered: false;\r\n      existingTrack?: never;\r\n      spotifyTrack: SuggestedTrack;\r\n    };\r\n\r\nexport type AlbumParamsResponse = {\r\n  release: ReleaseParamsResult;\r\n  tracks: TrackParamsResult[];\r\n};\r\nexport const getAlbumParams = async (\r\n  spotifyAlbumId: string\r\n): Promise<AlbumParamsResponse> => {\r\n  const response: AxiosResponse<AlbumParamsResponse> = await axios.post(\r\n    routePrefix + \"/getAlbumInfo\",\r\n    {\r\n      spotifyAlbumId,\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\nexport const createArtist = async (\r\n  spotifyArtistId: string,\r\n  name: string\r\n): Promise<Artist> => {\r\n  const response: AxiosResponse<Artist> = await axios.post(\r\n    routePrefix + \"/createArtist\",\r\n    { spotifyArtistId, name }\r\n  );\r\n  return response.data;\r\n};\r\n\r\ntype CreateReleaseParams = {\r\n  name: string;\r\n  spotifyAlbumId: string;\r\n  releaseType: ReleaseType;\r\n  artistIds: string[];\r\n};\r\nexport const createRelease = async (\r\n  params: CreateReleaseParams\r\n): Promise<Release> => {\r\n  const response: AxiosResponse<Release> = await axios.post(\r\n    routePrefix + \"/createRelease\",\r\n    params\r\n  );\r\n  return response.data;\r\n};\r\n\r\nexport type CreateTrackParams = {\r\n  name: string;\r\n  spotifyTrackId: string;\r\n  artistIds: string[];\r\n  releaseId: string;\r\n};\r\nexport const createTrack = async (\r\n  params: CreateTrackParams\r\n): Promise<Track> => {\r\n  const response: AxiosResponse<Track> = await axios.post(\r\n    routePrefix + \"/createTrack\",\r\n    params\r\n  );\r\n  return response.data;\r\n};\r\n\r\nexport type CreateTrackResponse =\r\n  | { success: true; track: Track; error?: never }\r\n  | { success: false; track?: never; error: string };\r\nexport const createManyTracks = async (\r\n  params: CreateTrackParams[]\r\n): Promise<CreateTrackResponse[]> => {\r\n  const response: AxiosResponse<CreateTrackResponse[]> = await axios.post(\r\n    routePrefix + \"/createManyTracks\",\r\n    {\r\n      tracks: params,\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n","import { Container, CssBaseline } from \"@material-ui/core\";\r\nimport { FunctionComponent } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst PageWrapper = styled.div`\r\n  display: flex;\r\n  padding-top: 60px;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  && > * {\r\n    margin: 8px;\r\n  }\r\n`;\r\n\r\nexport const PageContainer: FunctionComponent = ({ children }) => {\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"md\">\r\n      <CssBaseline />\r\n      <PageWrapper>{children}</PageWrapper>\r\n    </Container>\r\n  );\r\n};\r\n","import { Button } from '@material-ui/core';\r\n\r\ntype TextButtonProps = {\r\n  label: string;\r\n  onClick: () => void;\r\n  disabled?: boolean;\r\n};\r\nexport const TextButton = (props: TextButtonProps) => {\r\n  return (\r\n    <Button onClick={props.onClick} disabled={props.disabled} variant=\"contained\" color=\"primary\">\r\n      {props.label}\r\n    </Button>\r\n  );\r\n};\r\n","import { IconButton, InputAdornment, TextField, Tooltip } from '@material-ui/core';\r\n\r\ntype TextInputProps = {\r\n  icon?: JSX.Element;\r\n  action?: () => void;\r\n  value: string;\r\n  setValue: (newValue: string) => void;\r\n  label: string;\r\n  isExternal: boolean;\r\n  id?: string;\r\n  disabled?: boolean;\r\n};\r\nexport const TextInput = (props: TextInputProps) => {\r\n  const { icon, action, value, setValue, label, isExternal, id, disabled } = props;\r\n\r\n  const renderAdornment = () => {\r\n    if (!icon) {\r\n      return undefined;\r\n    }\r\n    if (!action) {\r\n      return { startAdornment: <InputAdornment position=\"start\">{icon}</InputAdornment> };\r\n    }\r\n    return {\r\n      endAdornment: (\r\n        <InputAdornment position=\"end\">\r\n          <IconButton disabled={disabled} onClick={action}>\r\n            {icon}\r\n          </IconButton>\r\n        </InputAdornment>\r\n      )\r\n    };\r\n  };\r\n\r\n  const input = (\r\n    <TextField\r\n      value={value}\r\n      label={label}\r\n      onChange={(e) => setValue(e.target.value)}\r\n      color={isExternal ? 'secondary' : 'primary'}\r\n      variant=\"filled\"\r\n      InputProps={renderAdornment()}\r\n      disabled={disabled}\r\n    />\r\n  );\r\n\r\n  if (id) {\r\n    return <Tooltip title={id}>{input}</Tooltip>;\r\n  }\r\n\r\n  return input;\r\n};\r\n","import { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { TextButton } from \"../../../common/forms/TextButton\";\r\nimport { TextInput } from \"../../../common/forms/TextInput\";\r\nimport { AlbumParamsResponse, getAlbumParams } from \"../../../../api/storage\";\r\n\r\nconst GetAlbumTracksContainer = styled.div`\r\n  display: flex;\r\n  && > * {\r\n    margin: 16px;\r\n  }\r\n`;\r\n\r\ntype FetchAlbumProps = {\r\n  setAlbumParams: (params: AlbumParamsResponse) => void;\r\n};\r\nexport const FetchAlbum = (props: FetchAlbumProps) => {\r\n  const { setAlbumParams } = props;\r\n\r\n  const [albumId, setAlbumId] = useState(\"\");\r\n  const [isFetched, setIsFetched] = useState(false);\r\n\r\n  const fetchAlbumParams = async () => {\r\n    const urlStripped = albumId.replace(\"https://open.spotify.com/album/\", \"\");\r\n    const suffixIndex = urlStripped.indexOf(\"?si=\");\r\n    const strippedAlbumId = urlStripped.substring(\r\n      0,\r\n      suffixIndex > -1 ? suffixIndex : undefined\r\n    );\r\n    const albumParams = await getAlbumParams(strippedAlbumId);\r\n    setIsFetched(true);\r\n    setAlbumParams(albumParams);\r\n  };\r\n\r\n  return (\r\n    <GetAlbumTracksContainer>\r\n      <TextInput\r\n        value={albumId}\r\n        setValue={setAlbumId}\r\n        label=\"Spotify Album ID\"\r\n        isExternal={isFetched}\r\n      />\r\n      <TextButton onClick={fetchAlbumParams} label=\"Get Album Info\" />\r\n    </GetAlbumTracksContainer>\r\n  );\r\n};\r\n","import { useState } from \"react\";\r\nimport { AlbumParamsResponse, getAlbumParams } from \"../../../api/storage\";\r\nimport { Artist, Release } from \"../../../api/types\";\r\nimport { PageContainer } from \"../../common/Page\";\r\nimport { FetchAlbum } from \"./sub-components/FetchAlbum\";\r\nimport { SelectRelease } from \"./sub-components/SelectRelease\";\r\nimport { SelectArtists } from \"./sub-components/SelectReleaseArtists\";\r\nimport { TrackInputs } from \"./sub-components/TrackInputs\";\r\n\r\nexport enum RegisterAlbumState {\r\n  InputSpotifyId,\r\n  CreateAlbumArtists,\r\n  CreateRelease,\r\n  CreateTracks,\r\n}\r\n\r\nexport const RegisterAlbumPage = () => {\r\n  const [registerAlbumState, setRegisterAlbumState] = useState(\r\n    RegisterAlbumState.InputSpotifyId\r\n  );\r\n  const [initialAlbumParams, setInitialAlbumParams] =\r\n    useState<AlbumParamsResponse>();\r\n  const [albumArtistIds, setAlbumArtistIds] = useState<string[]>();\r\n  const [releaseDocument, setReleaseDocument] = useState<Release>();\r\n\r\n  const setAlbumParams = (albumParams: AlbumParamsResponse) => {\r\n    setInitialAlbumParams(albumParams);\r\n\r\n    if (albumParams.release.isRegistered) {\r\n      setReleaseDocument(albumParams.release.existingRelease);\r\n      setRegisterAlbumState(RegisterAlbumState.CreateTracks);\r\n      return;\r\n    }\r\n\r\n    const registeredAlbumArtistIds: string[] = [];\r\n    for (const artist of albumParams.release.spotifyRelease.albumArtists) {\r\n      if (artist.isRegistered) {\r\n        registeredAlbumArtistIds.push(artist.existingArtist._id);\r\n      }\r\n    }\r\n\r\n    if (\r\n      registeredAlbumArtistIds.length ===\r\n      albumParams.release.spotifyRelease.albumArtists.length\r\n    ) {\r\n      setAlbumArtistIds(registeredAlbumArtistIds);\r\n      setRegisterAlbumState(RegisterAlbumState.CreateRelease);\r\n      return;\r\n    }\r\n\r\n    setRegisterAlbumState(RegisterAlbumState.CreateAlbumArtists);\r\n  };\r\n\r\n  const renderFetchAlbum = () => {\r\n    if (registerAlbumState !== RegisterAlbumState.InputSpotifyId) {\r\n      return <></>;\r\n    }\r\n\r\n    return <FetchAlbum setAlbumParams={setAlbumParams} />;\r\n  };\r\n\r\n  const addAlbumArtist = (artist: Artist) => {\r\n    if (!initialAlbumParams || initialAlbumParams.release.isRegistered) {\r\n      return;\r\n    }\r\n\r\n    const { _id: artistId } = artist;\r\n\r\n    const newAlbumArtistIds = albumArtistIds\r\n      ? [...albumArtistIds, artistId]\r\n      : [artistId];\r\n    setAlbumArtistIds(\r\n      albumArtistIds ? [...albumArtistIds, artistId] : [artistId]\r\n    );\r\n    if (\r\n      newAlbumArtistIds.length ===\r\n      initialAlbumParams.release.spotifyRelease.albumArtists.length\r\n    ) {\r\n      setRegisterAlbumState(RegisterAlbumState.CreateRelease);\r\n    }\r\n  };\r\n\r\n  const renderInputAlbumArtists = () => {\r\n    if (\r\n      registerAlbumState !== RegisterAlbumState.CreateAlbumArtists ||\r\n      !initialAlbumParams ||\r\n      initialAlbumParams.release.isRegistered\r\n    ) {\r\n      return <></>;\r\n    }\r\n\r\n    return (\r\n      <SelectArtists\r\n        artistsParams={initialAlbumParams.release.spotifyRelease.albumArtists}\r\n        addArtist={addAlbumArtist}\r\n      />\r\n    );\r\n  };\r\n\r\n  const addRelease = async (release: Release) => {\r\n    setReleaseDocument(release);\r\n    const updatedAlbumParams = await getAlbumParams(release.spotifyIds[0]);\r\n    setInitialAlbumParams(updatedAlbumParams);\r\n    setRegisterAlbumState(RegisterAlbumState.CreateTracks);\r\n  };\r\n\r\n  const renderInputRelease = () => {\r\n    if (\r\n      registerAlbumState !== RegisterAlbumState.CreateRelease ||\r\n      !initialAlbumParams ||\r\n      !albumArtistIds ||\r\n      initialAlbumParams.release.isRegistered\r\n    ) {\r\n      return <></>;\r\n    }\r\n\r\n    return (\r\n      <SelectRelease\r\n        artistIds={albumArtistIds}\r\n        releaseParams={initialAlbumParams.release}\r\n        setReleaseDocument={addRelease}\r\n      />\r\n    );\r\n  };\r\n\r\n  const renderTrackInputs = () => {\r\n    if (\r\n      registerAlbumState !== RegisterAlbumState.CreateTracks ||\r\n      !initialAlbumParams ||\r\n      !releaseDocument\r\n    ) {\r\n      return <></>;\r\n    }\r\n\r\n    return (\r\n      <TrackInputs\r\n        tracksParams={initialAlbumParams.tracks}\r\n        release={releaseDocument}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <PageContainer>\r\n      {renderFetchAlbum()}\r\n      {renderInputAlbumArtists()}\r\n      {renderInputRelease()}\r\n      {renderTrackInputs()}\r\n    </PageContainer>\r\n  );\r\n};\r\n","import Link from \"@material-ui/icons/Link\";\r\nimport LinkOff from \"@material-ui/icons/LinkOff\";\r\nimport NoteAdd from \"@material-ui/icons/NoteAdd\";\r\nimport BackspaceIcon from \"@material-ui/icons/Backspace\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport WbSunny from \"@material-ui/icons/WbSunny\";\r\nimport NightsStay from \"@material-ui/icons/NightsStay\";\r\nimport Settings from \"@material-ui/icons/Settings\";\r\nimport LockOpenIcon from \"@material-ui/icons/LockOpen\";\r\nimport LockIcon from \"@material-ui/icons/Lock\";\r\nimport Album from \"@material-ui/icons/Album\";\r\n\r\ntype IconProps = {\r\n  size?: \"small\" | \"inherit\" | \"large\" | \"default\";\r\n};\r\nexport const LinkEnabledIcon = ({ size }: IconProps) => (\r\n  <Link fontSize={size} />\r\n);\r\nexport const LinkDisabledIcon = ({ size }: IconProps) => (\r\n  <LinkOff fontSize={size} />\r\n);\r\nexport const CreateIcon = ({ size }: IconProps) => <NoteAdd fontSize={size} />;\r\nexport const StripIcon = ({ size }: IconProps) => (\r\n  <BackspaceIcon fontSize={size} />\r\n);\r\nexport const MenuToggleIcon = ({ size }: IconProps) => (\r\n  <MenuIcon fontSize={size} />\r\n);\r\nexport const LightModeIcon = ({ size }: IconProps) => (\r\n  <WbSunny fontSize={size} />\r\n);\r\nexport const DarkModeIcon = ({ size }: IconProps) => (\r\n  <NightsStay fontSize={size} />\r\n);\r\nexport const SettingsIcon = ({ size }: IconProps) => (\r\n  <Settings fontSize={size} />\r\n);\r\nexport const LoginIcon = ({ size }: IconProps) => (\r\n  <LockOpenIcon fontSize={size} />\r\n);\r\nexport const LogoutIcon = ({ size }: IconProps) => <LockIcon fontSize={size} />;\r\nexport const AlbumIcon = ({ size }: IconProps) => <Album fontSize={size} />;\r\n","import { useState } from \"react\";\r\nimport { createRelease, ReleaseParamsResult } from \"../../../../api/storage\";\r\nimport { Release, ReleaseType } from \"../../../../api/types\";\r\nimport { TextInput } from \"../../../common/forms/TextInput\";\r\nimport { CreateIcon } from \"../../../icons/material-icons\";\r\n\r\ntype SelectReleaseProps = {\r\n  releaseParams: ReleaseParamsResult;\r\n  artistIds: string[];\r\n  setReleaseDocument: (release: Release) => void;\r\n};\r\nexport const SelectRelease = (props: SelectReleaseProps) => {\r\n  const { releaseParams, artistIds, setReleaseDocument } = props;\r\n  const [newReleaseName, setNewReleaseName] = useState(\r\n    releaseParams.spotifyRelease?.name\r\n  );\r\n  const [newRelease, setNewRelease] = useState<Release>();\r\n\r\n  const sendCreateRelease = async () => {\r\n    if (releaseParams.isRegistered) {\r\n      return;\r\n    }\r\n\r\n    const newRelease = await createRelease({\r\n      artistIds,\r\n      name: newReleaseName || releaseParams.spotifyRelease.name,\r\n      releaseType: ReleaseType.Album,\r\n      spotifyAlbumId: releaseParams.spotifyRelease.spotifyAlbumId,\r\n    });\r\n    setNewRelease(newRelease);\r\n    setReleaseDocument(newRelease);\r\n  };\r\n\r\n  if (releaseParams.isRegistered) {\r\n    return (\r\n      <TextInput\r\n        isExternal={false}\r\n        label=\"Stored Release\"\r\n        setValue={() => {}}\r\n        value={releaseParams.existingRelease.name}\r\n        id={releaseParams.existingRelease._id}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (newRelease) {\r\n    return (\r\n      <TextInput\r\n        isExternal={false}\r\n        label=\"Created Release\"\r\n        setValue={() => {}}\r\n        value={newRelease.name}\r\n        id={newRelease._id}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <TextInput\r\n      isExternal={true}\r\n      label=\"Suggested Release\"\r\n      action={sendCreateRelease}\r\n      icon={<CreateIcon />}\r\n      setValue={setNewReleaseName}\r\n      value={newReleaseName || releaseParams.spotifyRelease.name}\r\n      id={releaseParams.spotifyRelease.spotifyAlbumId}\r\n      disabled={artistIds.length < 1}\r\n    />\r\n  );\r\n};\r\n","import { useState } from \"react\";\r\nimport { ArtistParamsResult, createArtist } from \"../../../../api/storage\";\r\nimport { Artist } from \"../../../../api/types\";\r\nimport { TextInput } from \"../../../common/forms/TextInput\";\r\nimport { CreateIcon } from \"../../../icons/material-icons\";\r\n\r\ntype SelectArtistProps = {\r\n  artistParams: ArtistParamsResult;\r\n  addArtist: (newArtist: Artist) => void;\r\n};\r\nexport const SelectArtist = (props: SelectArtistProps) => {\r\n  const { artistParams, addArtist } = props;\r\n  const [newArtist, setNewArtist] = useState<Artist>();\r\n\r\n  const sendCreateArtist = async () => {\r\n    if (artistParams.isRegistered) {\r\n      return;\r\n    }\r\n\r\n    const newArtist = await createArtist(\r\n      artistParams.spotifyArtist.spotifyArtistId,\r\n      artistParams.spotifyArtist.name\r\n    );\r\n    addArtist(newArtist);\r\n    setNewArtist(newArtist);\r\n  };\r\n\r\n  if (artistParams.isRegistered) {\r\n    return (\r\n      <TextInput\r\n        isExternal={false}\r\n        label=\"Stored Artist\"\r\n        setValue={() => {}}\r\n        value={artistParams.existingArtist.name}\r\n        id={artistParams.existingArtist._id}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (newArtist) {\r\n    return (\r\n      <TextInput\r\n        isExternal={false}\r\n        label=\"Created Artist\"\r\n        setValue={() => {}}\r\n        value={newArtist.name}\r\n        id={newArtist._id}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <TextInput\r\n      isExternal={true}\r\n      label=\"Suggested Artist\"\r\n      action={sendCreateArtist}\r\n      icon={<CreateIcon />}\r\n      setValue={() => {}}\r\n      value={artistParams.spotifyArtist.name}\r\n      id={artistParams.spotifyArtist.spotifyArtistId}\r\n    />\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\nimport { ArtistParamsResult } from \"../../../../api/storage\";\r\nimport { Artist } from \"../../../../api/types\";\r\nimport { SelectArtist } from \"./SelectArtist\";\r\n\r\nconst RegisterArtistsContainer = styled.div`\r\n  display: flex;\r\n  && > * {\r\n    margin: 8px;\r\n  }\r\n`;\r\n\r\ntype SelectArtistsProps = {\r\n  artistsParams: ArtistParamsResult[];\r\n  addArtist: (artist: Artist) => void;\r\n};\r\nexport const SelectArtists = (props: SelectArtistsProps) => {\r\n  const { artistsParams: artistParams, addArtist } = props;\r\n  return (\r\n    <RegisterArtistsContainer>\r\n      {artistParams.map((artist) => (\r\n        <SelectArtist\r\n          key={\r\n            artist.existingArtist\r\n              ? artist.existingArtist._id\r\n              : artist.spotifyArtist.spotifyArtistId\r\n          }\r\n          artistParams={artist}\r\n          addArtist={addArtist}\r\n        />\r\n      ))}\r\n    </RegisterArtistsContainer>\r\n  );\r\n};\r\n","import { TrackParamsResult } from \"../../../../api/storage\";\r\nimport { TextInput } from \"../../../common/forms/TextInput\";\r\n\r\ntype SelectTrackProps = {\r\n  trackParams: TrackParamsResult;\r\n  setTrackName: (spotifyTrackId: string, trackName: string) => void;\r\n};\r\nexport const SelectTrack = (props: SelectTrackProps) => {\r\n  const { trackParams, setTrackName } = props;\r\n\r\n  if (trackParams.isRegistered) {\r\n    return (\r\n      <TextInput\r\n        isExternal={false}\r\n        label=\"Stored Track\"\r\n        setValue={() => {}}\r\n        value={trackParams.existingTrack.name}\r\n        id={trackParams.existingTrack._id}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <TextInput\r\n      isExternal={true}\r\n      label=\"Suggested Track\"\r\n      setValue={(val) =>\r\n        setTrackName(trackParams.spotifyTrack.spotifyTrackId, val)\r\n      }\r\n      value={trackParams.spotifyTrack.name}\r\n      id={trackParams.spotifyTrack.spotifyTrackId}\r\n    />\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\nimport { TrackParamsResult } from \"../../../../api/storage\";\r\nimport { Artist } from \"../../../../api/types\";\r\nimport { SelectArtists } from \"./SelectReleaseArtists\";\r\nimport { SelectTrack } from \"./SelectTrack\";\r\n\r\nconst TrackInputContainer = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nconst TrackNameContainer = styled.div`\r\n  margin: 8px;\r\n`;\r\n\r\ntype TrackInputProps = {\r\n  trackParams: TrackParamsResult;\r\n  addArtist: (newArtist: Artist) => void;\r\n  setTrackName: (spotifyTrackId: string, trackName: string) => void;\r\n};\r\nexport const TrackInput = (props: TrackInputProps) => {\r\n  const { trackParams, addArtist, setTrackName } = props;\r\n\r\n  const renderSelectTrack = () => {\r\n    return (\r\n      <TrackNameContainer>\r\n        <SelectTrack trackParams={trackParams} setTrackName={setTrackName} />\r\n      </TrackNameContainer>\r\n    );\r\n  };\r\n\r\n  const renderRegisterTrackArtists = () => {\r\n    if (trackParams.isRegistered) {\r\n      return <></>;\r\n    }\r\n\r\n    return (\r\n      <SelectArtists\r\n        artistsParams={trackParams.spotifyTrack.artists}\r\n        addArtist={addArtist}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <TrackInputContainer>\r\n      {renderSelectTrack()}\r\n      {renderRegisterTrackArtists()}\r\n    </TrackInputContainer>\r\n  );\r\n};\r\n","import { useState } from \"react\";\r\nimport {\r\n  createManyTracks,\r\n  TrackParamsResult,\r\n  CreateTrackParams,\r\n} from \"../../../../api/storage\";\r\nimport { Artist, Release } from \"../../../../api/types\";\r\nimport { TextInput } from \"../../../common/forms/TextInput\";\r\nimport { StripIcon } from \"../../../icons/material-icons\";\r\nimport { TrackInput } from \"./TrackInput\";\r\nimport produce from \"immer\";\r\nimport { TextButton } from \"../../../common/forms/TextButton\";\r\n\r\ntype TrackInputsProps = {\r\n  tracksParams: TrackParamsResult[];\r\n  release: Release;\r\n};\r\nexport const TrackInputs = (props: TrackInputsProps) => {\r\n  const { tracksParams, release } = props;\r\n  const [tracks, setTracks] = useState<TrackParamsResult[]>(tracksParams);\r\n  const [commonTerm, setCommonTerm] = useState(\"\");\r\n\r\n  const addArtist = (newArtist: Artist) => {\r\n    const [spotifyArtistId] = newArtist.spotifyIds;\r\n    setTracks(\r\n      produce(tracks, (draft) => {\r\n        for (const track of draft) {\r\n          if (track.isRegistered) {\r\n            continue;\r\n          }\r\n          for (const artist of track.spotifyTrack.artists) {\r\n            if (artist.spotifyArtist?.spotifyArtistId === spotifyArtistId) {\r\n              artist.existingArtist = {\r\n                _id: newArtist._id,\r\n                name: newArtist.name,\r\n              };\r\n              artist.isRegistered = true;\r\n            }\r\n          }\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const setTrackName = (spotifyTrackId: string, trackName: string) => {\r\n    setTracks(\r\n      produce(tracks, (draft) => {\r\n        const spotifyTrack = draft.find(\r\n          (track) => track.spotifyTrack?.spotifyTrackId === spotifyTrackId\r\n        )?.spotifyTrack;\r\n        if (spotifyTrack) {\r\n          spotifyTrack.name = trackName;\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const stripTerm = () => {\r\n    setTracks(\r\n      produce(tracks, (draft) => {\r\n        for (const track of draft) {\r\n          if (track.isRegistered) {\r\n            continue;\r\n          }\r\n          track.spotifyTrack.name = track.spotifyTrack.name.replace(\r\n            commonTerm,\r\n            \"\"\r\n          );\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const isCreateTracksDisabled = () => {\r\n    return tracks.some(\r\n      (track) =>\r\n        !track.isRegistered &&\r\n        track.spotifyTrack.artists.some((artist) => !artist.isRegistered)\r\n    );\r\n  };\r\n\r\n  const createTracks = async () => {\r\n    await createManyTracks(\r\n      tracks.reduce((tracks, currentTrack) => {\r\n        if (!currentTrack.isRegistered) {\r\n          tracks.push({\r\n            spotifyTrackId: currentTrack.spotifyTrack.spotifyTrackId,\r\n            artistIds: currentTrack.spotifyTrack.artists.reduce(\r\n              (artists, currentArtist) => {\r\n                if (currentArtist.isRegistered) {\r\n                  artists.push(currentArtist.existingArtist._id);\r\n                }\r\n                return artists;\r\n              },\r\n              [] as string[]\r\n            ),\r\n            name: currentTrack.spotifyTrack.name,\r\n            releaseId: release._id,\r\n          });\r\n        }\r\n        return tracks;\r\n      }, [] as CreateTrackParams[])\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TextInput\r\n        icon={<StripIcon />}\r\n        action={stripTerm}\r\n        isExternal={false}\r\n        label=\"Strip Common Term\"\r\n        setValue={setCommonTerm}\r\n        value={commonTerm}\r\n      />\r\n      <TextButton\r\n        label=\"Save Tracks\"\r\n        disabled={isCreateTracksDisabled()}\r\n        onClick={createTracks}\r\n      />\r\n      {tracks.map((track) => (\r\n        <TrackInput\r\n          key={\r\n            track.isRegistered\r\n              ? track.existingTrack._id\r\n              : track.spotifyTrack.spotifyTrackId\r\n          }\r\n          trackParams={track}\r\n          addArtist={addArtist}\r\n          setTrackName={setTrackName}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n","import { BrowserRouter, Route } from \"react-router-dom\";\r\nimport { RegisterAlbumPage } from \"../components/pages/register-album/RegisterAlbumPage\";\r\nimport { ErrorPage } from \"../components/pages/ErrorPage\";\r\nimport { useAuthentication } from \"../context/authentication-context\";\r\nimport { BaseAppComponents } from \"./BaseAppComponents\";\r\n\r\nexport enum RouterPath {\r\n  RegisterAlbum = \"/register-album\",\r\n}\r\ntype RouterPathDisplayValues = { [key in RouterPath]: string };\r\nexport const pathDisplayValues: RouterPathDisplayValues = {\r\n  \"/register-album\": \"Register Album\",\r\n};\r\n\r\nexport const Router = () => {\r\n  const { isLoggedIn } = useAuthentication();\r\n\r\n  const renderAuthenticatedPage = (page: JSX.Element): JSX.Element => {\r\n    return isLoggedIn ? page : <ErrorPage />;\r\n  };\r\n\r\n  return (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <BaseAppComponents />\r\n      {/* Use the new Routes component when React Router DOM is updated to v6 */}\r\n      {/* https://stackoverflow.com/a/49321289 */}\r\n      <Route\r\n        path={RouterPath.RegisterAlbum}\r\n        render={() => renderAuthenticatedPage(<RegisterAlbumPage />)}\r\n      />\r\n    </BrowserRouter>\r\n  );\r\n};\r\n","import { Typography } from \"@material-ui/core\";\r\n\r\ntype HeadingProps = { className?: string; text: string; isSecondary?: boolean };\r\nexport const Heading = ({ className, text, isSecondary }: HeadingProps) => {\r\n  return (\r\n    <Typography\r\n      className={className}\r\n      variant=\"h6\"\r\n      color={isSecondary ? \"textSecondary\" : undefined}\r\n    >\r\n      {text}\r\n    </Typography>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\nimport { PageContainer } from \"../common/Page\";\r\nimport { Heading } from \"../common/text/Heading\";\r\n\r\nconst ErrorContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  && > * {\r\n    margin: 8px;\r\n  }\r\n`;\r\n\r\nexport const ErrorPage = () => {\r\n  return (\r\n    <PageContainer>\r\n      <ErrorContainer>\r\n        <Heading text=\"401: Unauthorized\" />\r\n      </ErrorContainer>\r\n    </PageContainer>\r\n  );\r\n};\r\n","import {\r\n  Drawer,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n} from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AlbumIcon } from \"../icons/material-icons\";\r\n\r\ntype LeftSidebarProps = {\r\n  isOpen: boolean;\r\n  toggleSidebar: () => void;\r\n};\r\nexport const LeftSidebar = (props: LeftSidebarProps) => {\r\n  const { isOpen, toggleSidebar } = props;\r\n\r\n  return (\r\n    <Drawer anchor=\"left\" open={isOpen} onClose={toggleSidebar}>\r\n      <div role=\"presentation\">\r\n        <List>\r\n          <ListItem\r\n            button\r\n            component={Link}\r\n            to=\"/register-album\"\r\n            onClick={toggleSidebar}\r\n          >\r\n            <ListItemIcon>\r\n              <AlbumIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Register Album\" />\r\n          </ListItem>\r\n        </List>\r\n      </div>\r\n    </Drawer>\r\n  );\r\n};\r\n","import { forwardRef } from \"react\";\r\nimport { IconButton as MaterialIconButton } from \"@material-ui/core\";\r\n\r\ntype IconButtonProps = {\r\n  className?: string;\r\n  icon: JSX.Element;\r\n  onClick: () => void;\r\n};\r\nexport const IconButton = forwardRef<HTMLButtonElement, IconButtonProps>(\r\n  ({ className, icon, onClick }, ref) => {\r\n    return (\r\n      <MaterialIconButton ref={ref} className={className} onClick={onClick}>\r\n        {icon}\r\n      </MaterialIconButton>\r\n    );\r\n  }\r\n);\r\n","import { createContext, useContext } from \"react\";\r\n\r\ntype MenuContextProps = { toggleMenu: () => void };\r\n\r\nexport const MenuContext =\r\n  createContext<MenuContextProps | undefined>(undefined);\r\n\r\nexport const useMenu = () => {\r\n  const context = useContext(MenuContext);\r\n  if (!context) {\r\n    throw new Error(\"Unable to access useMenu without provider wrapper\");\r\n  }\r\n  return context;\r\n};\r\n","import { Menu as MaterialMenu } from \"@material-ui/core\";\r\nimport { FunctionComponent } from \"react\";\r\nimport { MenuContext } from \"../../../context/menu-context\";\r\n\r\ntype MenuProps = {\r\n  isOpen: boolean;\r\n  toggleMenu: () => void;\r\n  anchorEl: HTMLButtonElement | null;\r\n};\r\nexport const Menu: FunctionComponent<MenuProps> = ({\r\n  isOpen,\r\n  toggleMenu,\r\n  anchorEl,\r\n  children,\r\n}) => {\r\n  return (\r\n    <MenuContext.Provider value={{ toggleMenu: toggleMenu }}>\r\n      <MaterialMenu\r\n        anchorEl={anchorEl}\r\n        // Apply the following props to place the menu below the AppBar:\r\n        // getContentAnchorEl={null}\r\n        // anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n        // transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n        open={isOpen}\r\n        onClose={toggleMenu}\r\n      >\r\n        {children}\r\n      </MaterialMenu>\r\n    </MenuContext.Provider>\r\n  );\r\n};\r\n","import { forwardRef } from \"react\";\r\nimport {\r\n  ListItemIcon,\r\n  ListItemText,\r\n  MenuItem as MaterialMenuItem,\r\n} from \"@material-ui/core\";\r\nimport { useMenu } from \"../../../context/menu-context\";\r\n\r\ntype MenuItemProps = {\r\n  onClick: () => void;\r\n  text: string;\r\n  icon?: JSX.Element;\r\n};\r\nexport const MenuItem = forwardRef<HTMLLIElement, MenuItemProps>(\r\n  ({ onClick, text, icon }, ref) => {\r\n    const { toggleMenu } = useMenu();\r\n    return (\r\n      <MaterialMenuItem\r\n        onClick={() => {\r\n          onClick();\r\n          toggleMenu();\r\n        }}\r\n        ref={ref}\r\n      >\r\n        {icon && <ListItemIcon>{icon}</ListItemIcon>}\r\n        <ListItemText primary={text} />\r\n      </MaterialMenuItem>\r\n    );\r\n  }\r\n);\r\n","import { forwardRef } from \"react\";\r\nimport { useAuthentication } from \"../../../context/authentication-context\";\r\nimport { DialogType, useDialog } from \"../../../context/dialogs-context\";\r\nimport { MenuItem } from \"../../common/menus/MenuItem\";\r\nimport { LoginIcon, LogoutIcon } from \"../../icons/material-icons\";\r\n\r\nexport const AuthenticationMenuItem = forwardRef<HTMLLIElement>(\r\n  (_props, ref) => {\r\n    const { isLoggedIn, attemptLogout } = useAuthentication();\r\n    const { showDialog } = useDialog();\r\n\r\n    return (\r\n      <MenuItem\r\n        ref={ref}\r\n        onClick={() => {\r\n          if (isLoggedIn) {\r\n            attemptLogout();\r\n          } else {\r\n            showDialog(DialogType.Login);\r\n          }\r\n        }}\r\n        text={isLoggedIn ? \"Log out\" : \"Log in\"}\r\n        icon={isLoggedIn ? <LogoutIcon /> : <LoginIcon />}\r\n      />\r\n    );\r\n  }\r\n);\r\n","import { forwardRef } from \"react\";\r\nimport { useTheme } from \"../../../context/theme-context\";\r\nimport { MenuItem } from \"../../common/menus/MenuItem\";\r\nimport { DarkModeIcon, LightModeIcon } from \"../../icons/material-icons\";\r\n\r\nexport const ThemeMenuItem = forwardRef<HTMLLIElement>((_props, ref) => {\r\n  const { useDarkMode, toggleDarkMode } = useTheme();\r\n  return (\r\n    <MenuItem\r\n      ref={ref}\r\n      onClick={toggleDarkMode}\r\n      text={useDarkMode ? \"Toggle light mode\" : \"Toggle dark mode\"}\r\n      icon={useDarkMode ? <LightModeIcon /> : <DarkModeIcon />}\r\n    />\r\n  );\r\n});\r\n","import { Menu } from \"../common/menus/Menu\";\r\nimport { AuthenticationMenuItem } from \"./settings/AuthenticationMenuItem\";\r\nimport { ThemeMenuItem } from \"./settings/ThemeMenuItem\";\r\n\r\ntype SettingsMenuProps = {\r\n  isOpen: boolean;\r\n  toggleSettingsMenu: () => void;\r\n  anchorEl: HTMLButtonElement | null;\r\n};\r\nexport const SettingsMenu = ({\r\n  isOpen,\r\n  toggleSettingsMenu,\r\n  anchorEl,\r\n}: SettingsMenuProps) => {\r\n  return (\r\n    <Menu isOpen={isOpen} toggleMenu={toggleSettingsMenu} anchorEl={anchorEl}>\r\n      <ThemeMenuItem />\r\n      <AuthenticationMenuItem />\r\n    </Menu>\r\n  );\r\n};\r\n","import { useRef, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IconButton } from \"../../common/forms/IconButton\";\r\nimport { SettingsIcon } from \"../../icons/material-icons\";\r\nimport { SettingsMenu } from \"../../layout/SettingsMenu\";\r\n\r\nconst SettingsButtonContainer = styled.div`\r\n  margin-left: auto;\r\n  min-width: 48px;\r\n`;\r\n\r\nexport const SettingsButton = () => {\r\n  const [isSettingsMenuOpen, setIsSettingsMenuOpen] = useState(false);\r\n  const ref = useRef<HTMLButtonElement>(null);\r\n\r\n  const toggleSettingsMenu = () => setIsSettingsMenuOpen(!isSettingsMenuOpen);\r\n\r\n  return (\r\n    <SettingsButtonContainer>\r\n      <IconButton\r\n        ref={ref}\r\n        onClick={toggleSettingsMenu}\r\n        icon={<SettingsIcon />}\r\n      />\r\n      <SettingsMenu\r\n        isOpen={isSettingsMenuOpen}\r\n        toggleSettingsMenu={toggleSettingsMenu}\r\n        anchorEl={ref.current}\r\n      />\r\n    </SettingsButtonContainer>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\nimport { AppBar, Divider, Toolbar } from \"@material-ui/core\";\r\nimport { MenuToggleIcon } from \"../icons/material-icons\";\r\nimport { useState } from \"react\";\r\nimport { LeftSidebar } from \"./LeftSidebar\";\r\nimport { Heading } from \"../common/text/Heading\";\r\nimport { IconButton } from \"../common/forms/IconButton\";\r\nimport { SettingsButton } from \"../functional/settings/SettingsButton\";\r\nimport { pathDisplayValues, RouterPath } from \"../../foundation/Router\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { useMemo } from \"react\";\r\n\r\nconst NavigationBarContainer = styled.div`\r\n  flex-grow: 1;\r\n`;\r\n\r\nconst MenuIconButton = styled(IconButton)`\r\n  && {\r\n    margin-right: 16px;\r\n  }\r\n`;\r\n\r\nconst getLocationDisplayValue = (location: string) => {\r\n  const matchingPath = Object.values(RouterPath).find((path) =>\r\n    location.endsWith(path)\r\n  );\r\n  return matchingPath ? pathDisplayValues[matchingPath] : undefined;\r\n};\r\n\r\nconst StyledDivider = styled(Divider)`\r\n  && {\r\n    height: 24px;\r\n    margin: 0 12px;\r\n    width: 1.5px;\r\n  }\r\n`;\r\n\r\nconst StyledHeading = styled(Heading)`\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n`;\r\n\r\nexport const NavigationBar = () => {\r\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n  const toggleSidebar = () => setIsSidebarOpen(!isSidebarOpen);\r\n\r\n  const { pathname } = useLocation();\r\n  const pathDisplay = useMemo(\r\n    () => getLocationDisplayValue(pathname),\r\n    [pathname]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <NavigationBarContainer>\r\n        <AppBar position=\"fixed\">\r\n          <Toolbar variant=\"dense\">\r\n            <MenuIconButton onClick={toggleSidebar} icon={<MenuToggleIcon />} />\r\n            <StyledHeading text=\"Music Library Editor\" />\r\n            {pathDisplay && (\r\n              <>\r\n                <StyledDivider orientation=\"vertical\" color=\"textSecondary\" />\r\n                <StyledHeading text={pathDisplay} isSecondary />\r\n              </>\r\n            )}\r\n            <SettingsButton />\r\n          </Toolbar>\r\n        </AppBar>\r\n      </NavigationBarContainer>\r\n      <LeftSidebar isOpen={isSidebarOpen} toggleSidebar={toggleSidebar} />\r\n    </>\r\n  );\r\n};\r\n","import {\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport { useAuthentication } from \"../../../context/authentication-context\";\r\nimport { useDialog } from \"../../../context/dialogs-context\";\r\n\r\nexport const LoginDialog = () => {\r\n  const { attemptLogin } = useAuthentication();\r\n  const { hideDialog } = useDialog();\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const executeLogin = async (username: string, password: string) => {\r\n    const success = await attemptLogin(username, password);\r\n    if (success) {\r\n      setUsername(\"\");\r\n      setPassword(\"\");\r\n      hideDialog();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog onClose={() => hideDialog()} open>\r\n      <DialogTitle>Log in</DialogTitle>\r\n      <DialogContent>\r\n        <TextField\r\n          autoFocus\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n          placeholder=\"Username\"\r\n        />\r\n        <TextField\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          placeholder=\"Password\"\r\n          type=\"password\"\r\n        />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={() => hideDialog()}>Cancel</Button>\r\n        <Button onClick={() => executeLogin(username, password)}>Log in</Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n","import { useDialog, DialogType } from \"../context/dialogs-context\";\r\nimport { LoginDialog } from \"../components/functional/authentication/LoginDialog\";\r\n\r\nconst dialogComponentMap: Map<DialogType, JSX.Element> = new Map([\r\n  [DialogType.Login, <LoginDialog />],\r\n]);\r\n\r\nexport const DialogsWrapper = () => {\r\n  const { currentDialog } = useDialog();\r\n\r\n  if (currentDialog === undefined) {\r\n    return <></>;\r\n  }\r\n\r\n  const dialogComponent = dialogComponentMap.get(currentDialog);\r\n  if (!dialogComponent) {\r\n    return <></>;\r\n  }\r\n\r\n  return dialogComponent;\r\n};\r\n","import { NavigationBar } from \"../components/layout/NavigationBar\";\r\nimport { DialogsWrapper } from \"./DialogsWrapper\";\r\n\r\nexport const BaseAppComponents = () => {\r\n  return (\r\n    <>\r\n      <NavigationBar />\r\n      <DialogsWrapper />\r\n    </>\r\n  );\r\n};\r\n","import { useTheme } from \"../context/theme-context\";\r\nimport { MuiThemeProvider } from \"@material-ui/core\";\r\nimport { FunctionComponent } from \"react\";\r\n\r\nexport const ThemeWrapper: FunctionComponent = ({ children }) => {\r\n  const { theme } = useTheme();\r\n  return <MuiThemeProvider theme={theme}>{children}</MuiThemeProvider>;\r\n};\r\n","import { ContextProviders } from \"./ContextProviders\";\r\nimport { Router } from \"./Router\";\r\nimport { ThemeWrapper } from \"./ThemeWrapper\";\r\n\r\nexport const App = () => {\r\n  return (\r\n    <ContextProviders>\r\n      <ThemeWrapper>\r\n        <Router />\r\n      </ThemeWrapper>\r\n    </ContextProviders>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./foundation/App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}